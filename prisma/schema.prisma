datasource db {
    // Change provider to whichever provide you're using.
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum CommandType {
    TEXT_COMMAND
    APPLICATION_COMMAND
}

model Cooldown {
    userId      String
    commandName String

    expiresAt DateTime

    commandType CommandType

    @@id([commandName, commandType, userId])
    @@map("command_cooldowns")
}

model UserLanguage {
    userId     String @id
    languageId String

    @@map("user_languages")
}

model AutoThreadChannel {
    channelId  String  @id
    guildId    String
    threadName String?

    @@map("auto_thread_channels")
}

model AutoTagOnForumChannel {
    channelId String
    guildId   String
    tagId     String

    @@id([channelId, tagId])
    @@map("auto_tag_on_forum_channels")
}

// We store this temporarily to avoid sending duplicate data to DataDog.
model NewCommunicator {
    userId   String
    guildId  String
    joinedAt DateTime

    @@id([userId, guildId])
    @@map("new_communicators")
}

model Embed {
    id      String @id @default(cuid())
    name    String
    data    String
    guildId String

    helpDeskOptions HelpDeskOption[]

    @@unique([name, guildId])
    @@map("embeds")
}

model HelpDesk {
    id         String  @id @default(cuid())
    guildId    String
    channelId  String?
    name       String
    embedColor String?
    messageId  String?

    helpDeskOptions HelpDeskOption[]

    @@unique([guildId, name])
    @@map("help_desks")
}

model HelpDeskOption {
    id            String   @id @default(cuid())
    name          String
    responseId    String
    description   String?
    helpDeskId    String
    emojiName     String?
    emojiId       String?
    emojiAnimated Boolean?
    position      Int

    helpDesk HelpDesk @relation(fields: [helpDeskId], references: [id], onDelete: Cascade)
    response Embed    @relation(fields: [responseId], references: [id], onDelete: Cascade)

    @@unique([helpDeskId, name])
    @@map("help_desk_options")
}

model SubscriptionGroup {
    id          String  @id
    name        String  @unique
    category    String?
    description String?

    subscribedUsers SubscribedUser[]

    @@map("subscription_groups")
}

model SubscribedUser {
    id        String @id @default(cuid())
    userId    String
    groupId   String
    channelId String

    group SubscriptionGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

    @@unique([userId, groupId])
    @@map("subscribed_users")
}

model Event {
    id          String  @id @default(cuid())
    guildId     String
    channelId   String
    name        String
    description String?
    active      Boolean @default(true)

    submissions Submission[]

    @@unique([name, guildId])
}

model Submission {
    userId    String
    eventId   String
    messageId String @unique

    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

    upvotes SubmissionUpvote[]

    @@id([userId, eventId])
}

model SubmissionUpvote {
    userId       String
    submissionId String
    eventId      String

    submission Submission @relation(fields: [submissionId], references: [messageId], onDelete: Cascade)

    @@id([userId, submissionId])
    @@unique([userId, eventId])
}
